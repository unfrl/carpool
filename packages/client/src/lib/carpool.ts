/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { CarpoolContext } from "./carpoolContext";

class Carpool extends CarpoolContext {
  /**
   * Initializes a new instance of the Carpool class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.CarpoolOptions) {
    super(credentials, options);
  }

  /**
   * Sign up a new user
   * @summary Sign up
   * @param signUpDto
   * @param [options] The optional parameters
   * @returns Promise<Models.SignUpResponse>
   */
  signUp(signUpDto: Models.SignUpDto, options?: msRest.RequestOptionsBase): Promise<Models.SignUpResponse>;
  /**
   * @param signUpDto
   * @param callback The callback
   */
  signUp(signUpDto: Models.SignUpDto, callback: msRest.ServiceCallback<Models.UserDto>): void;
  /**
   * @param signUpDto
   * @param options The optional parameters
   * @param callback The callback
   */
  signUp(signUpDto: Models.SignUpDto, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserDto>): void;
  signUp(signUpDto: Models.SignUpDto, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserDto>, callback?: msRest.ServiceCallback<Models.UserDto>): Promise<Models.SignUpResponse> {
    return this.sendOperationRequest(
      {
        signUpDto,
        options
      },
      signUpOperationSpec,
      callback) as Promise<Models.SignUpResponse>;
  }

  /**
   * Sign in an existing user
   * @summary Sign in
   * @param authDto
   * @param [options] The optional parameters
   * @returns Promise<Models.SignInResponse>
   */
  signIn(authDto: Models.AuthDto, options?: msRest.RequestOptionsBase): Promise<Models.SignInResponse>;
  /**
   * @param authDto
   * @param callback The callback
   */
  signIn(authDto: Models.AuthDto, callback: msRest.ServiceCallback<Models.UserDto>): void;
  /**
   * @param authDto
   * @param options The optional parameters
   * @param callback The callback
   */
  signIn(authDto: Models.AuthDto, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserDto>): void;
  signIn(authDto: Models.AuthDto, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserDto>, callback?: msRest.ServiceCallback<Models.UserDto>): Promise<Models.SignInResponse> {
    return this.sendOperationRequest(
      {
        authDto,
        options
      },
      signInOperationSpec,
      callback) as Promise<Models.SignInResponse>;
  }

  /**
   * Create a new Carpool
   * @summary Create Carpool
   * @param carpoolDto
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCarpoolResponse>
   */
  createCarpool(carpoolDto: Models.CarpoolDto, options?: msRest.RequestOptionsBase): Promise<Models.CreateCarpoolResponse>;
  /**
   * @param carpoolDto
   * @param callback The callback
   */
  createCarpool(carpoolDto: Models.CarpoolDto, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  /**
   * @param carpoolDto
   * @param options The optional parameters
   * @param callback The callback
   */
  createCarpool(carpoolDto: Models.CarpoolDto, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  createCarpool(carpoolDto: Models.CarpoolDto, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CarpoolModel>, callback?: msRest.ServiceCallback<Models.CarpoolModel>): Promise<Models.CreateCarpoolResponse> {
    return this.sendOperationRequest(
      {
        carpoolDto,
        options
      },
      createCarpoolOperationSpec,
      callback) as Promise<Models.CreateCarpoolResponse>;
  }

  /**
   * Retrieve a Carpool
   * @summary Get Carpool
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCarpoolResponse>
   */
  getCarpool(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCarpoolResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getCarpool(id: string, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getCarpool(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  getCarpool(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CarpoolModel>, callback?: msRest.ServiceCallback<Models.CarpoolModel>): Promise<Models.GetCarpoolResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getCarpoolOperationSpec,
      callback) as Promise<Models.GetCarpoolResponse>;
  }

  /**
   * Update a Carpool
   * @summary Update Carpool
   * @param carpoolDto
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCarpoolResponse>
   */
  updateCarpool(carpoolDto: Models.CarpoolDto, id: string, options?: msRest.RequestOptionsBase): Promise<Models.UpdateCarpoolResponse>;
  /**
   * @param carpoolDto
   * @param id
   * @param callback The callback
   */
  updateCarpool(carpoolDto: Models.CarpoolDto, id: string, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  /**
   * @param carpoolDto
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCarpool(carpoolDto: Models.CarpoolDto, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  updateCarpool(carpoolDto: Models.CarpoolDto, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CarpoolModel>, callback?: msRest.ServiceCallback<Models.CarpoolModel>): Promise<Models.UpdateCarpoolResponse> {
    return this.sendOperationRequest(
      {
        carpoolDto,
        id,
        options
      },
      updateCarpoolOperationSpec,
      callback) as Promise<Models.UpdateCarpoolResponse>;
  }

  /**
   * Delete a Carpool
   * @summary Delete Carpool
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCarpoolResponse>
   */
  deleteCarpool(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteCarpoolResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteCarpool(id: string, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCarpool(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CarpoolModel>): void;
  deleteCarpool(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CarpoolModel>, callback?: msRest.ServiceCallback<Models.CarpoolModel>): Promise<Models.DeleteCarpoolResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteCarpoolOperationSpec,
      callback) as Promise<Models.DeleteCarpoolResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const signUpOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/auth/signup",
  requestBody: {
    parameterPath: "signUpDto",
    mapper: {
      ...Mappers.SignUpDto,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.UserDto
    },
    default: {}
  },
  serializer
};

const signInOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/auth/signin",
  requestBody: {
    parameterPath: "authDto",
    mapper: {
      ...Mappers.AuthDto,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserDto
    },
    default: {}
  },
  serializer
};

const createCarpoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/carpool",
  requestBody: {
    parameterPath: "carpoolDto",
    mapper: {
      ...Mappers.CarpoolDto,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.CarpoolModel
    },
    default: {}
  },
  serializer
};

const getCarpoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/carpool/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CarpoolModel
    },
    404: {},
    default: {}
  },
  serializer
};

const updateCarpoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/carpool/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "carpoolDto",
    mapper: {
      ...Mappers.CarpoolDto,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CarpoolModel
    },
    404: {},
    default: {}
  },
  serializer
};

const deleteCarpoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/carpool/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CarpoolModel
    },
    404: {},
    default: {}
  },
  serializer
};

export {
  Carpool,
  CarpoolContext,
  Models as CarpoolModels,
  Mappers as CarpoolMappers
};
